local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
    Name = "Sir Doom",
    Icon = 0,
    LoadingTitle = "Sdoom",
    LoadingSubtitle = "by Doom",
    Theme = "Default",
    DisableRayfieldPrompts = false,
    DisableBuildWarnings = false,
    ConfigurationSaving = {
        Enabled = true,
        FolderName = nil,
        FileName = "lua Hub"
    },
    Discord = {
        Enabled = false,
        Invite = "noinvitelink",
        RememberJoins = true
    },
    KeySystem = false,
    KeySettings = {
        Title = "Untitled",
        Subtitle = "Key System",
        Note = "No method of obtaining the key is provided",
        FileName = "Key",
        SaveKey = true,
        GrabKeyFromSite = false,
        Key = {"Hello"}
    }
})

local Tab = Window:CreateTab("MainTab")
local Section = Tab:CreateSection("Main")

-- Tracer için global bir tablo ve güncelleme bağlantısı
local tracers = {}
local tracerUpdateConnection

-- Tracer güncelleme fonksiyonu
local function updateTracers()
    local Camera = workspace.CurrentCamera
    local LocalPlayer = game:GetService("Players").LocalPlayer

    for player, tracer in pairs(tracers) do
        if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            local characterPosition = player.Character.HumanoidRootPart.Position
            local screenPosition, onScreen = Camera:WorldToViewportPoint(characterPosition)

            if onScreen then
                tracer.From = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y)
                tracer.To = Vector2.new(screenPosition.X, screenPosition.Y)
                tracer.Visible = true
            else
                tracer.Visible = false
            end
        end
    end
end

-- Toggle komutu ile tracer'ı aç/kapat
local Toggle = Tab:CreateToggle({
    Name = "Tracer Toggle",
    CurrentValue = false,
    Flag = "Toggle1",
    Callback = function(Value)
        local Players = game:GetService("Players")

        if Value then
            -- Tracer'ları oluştur ve güncellemeye başla
            for _, player in pairs(Players:GetPlayers()) do
                if player ~= Players.LocalPlayer then
                    local tracer = Drawing.new("Line")
                    tracer.Thickness = 2
                    tracer.Color = Color3.fromRGB(255, 255, 255)
                    tracer.Transparency = 1
                    tracers[player] = tracer
                end
            end

            -- Yeni oyuncu eklendiğinde tracer oluştur
            Players.PlayerAdded:Connect(function(player)
                if player ~= Players.LocalPlayer then
                    local tracer = Drawing.new("Line")
                    tracer.Thickness = 2
                    tracer.Color = Color3.fromRGB(255, 255, 255)
                    tracer.Transparency = 1
                    tracers[player] = tracer
                end
            end)

            -- Tracer'ları her karede güncelle
            tracerUpdateConnection = game:GetService("RunService").RenderStepped:Connect(updateTracers)

        else
            -- Tracer'ları kaldır ve güncellemeyi durdur
            for _, tracer in pairs(tracers) do
                tracer:Remove()
            end
            tracers = {}

            if tracerUpdateConnection then
                tracerUpdateConnection:Disconnect()
                tracerUpdateConnection = nil
            end
        end
    end,
})

-- Global player list
local playerList = {}
local highlightEnabled = true  -- Vurgulamanın açık/kapalı olduğunu belirleyen flag

-- GUI elemanları (Roblox GUI için örnek)
local screenGui = Instance.new("ScreenGui")
local playerListFrame = Instance.new("Frame", screenGui)
playerListFrame.Size = UDim2.new(0.3, 0, 0.5, 0)
playerListFrame.Position = UDim2.new(0.7, 0, 0.25, 0)
playerListFrame.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
playerListFrame.Visible = true  -- Başlangıçta görünür

-- Bir toggle fonksiyonu ile highlight'ı açıp kapatabiliriz
function toggleHighlight()
    highlightEnabled = not highlightEnabled
    updatePlayerList()  -- Vurgulama durumunu güncelle
end

-- Oyuncu oyuna girdiğinde listeye ekle
function playerJoined(playerName)
    if not playerList[playerName] then
        playerList[playerName] = "joined"
        print(playerName .. " oyuna girdi!")
    end
    updatePlayerList()
end

-- Oyuncu oyundan çıktığında listeden çıkar
function playerLeft(playerName)
    if playerList[playerName] then
        playerList[playerName] = "left"
        print(playerName .. " oyundan çıktı!")
    end
    updatePlayerList()
end

-- GUI üzerinde oyuncu listesini güncelle
function updatePlayerList()
    -- Eski UI öğelerini temizle
    for _, child in pairs(playerListFrame:GetChildren()) do
        if child:IsA("TextLabel") then
            child:Destroy()
        end
    end
    
    -- Oyuncu listesine göre yeni TextLabel'lar oluştur
    local yPosition = 0
    for playerName, status in pairs(playerList) do
        local statusMessage = (status == "joined") and "[Girdi]" or "[Çıktı]"
        local color = (status == "joined") and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 0, 0)  -- Yeşil (girdi) ya da Kırmızı (çıktı)

        -- Eğer highlight aktifse, arka plan rengi değiştirilir
        local backgroundColor = (highlightEnabled) and color or Color3.fromRGB(255, 255, 255)

        -- Yeni TextLabel oluştur
        local label = Instance.new("TextLabel", playerListFrame)
        label.Size = UDim2.new(1, 0, 0, 30)
        label.Position = UDim2.new(0, 0, 0, yPosition)
        label.Text = playerName .. " " .. statusMessage
        label.BackgroundColor3 = backgroundColor
        label.TextColor3 = Color3.fromRGB(0, 0, 0)
        label.TextScaled = true
        label.TextStrokeTransparency = 0.8
        label.TextSize = 20
        label.BorderSizePixel = 1
        yPosition = yPosition + 35  -- Y pozisyonunu güncelle
    end
end

-- Test için örnek oyuncu giriş ve çıkışları
playerJoined("Ahmet")
playerJoined("Mehmet")
playerLeft("Ahmet")
playerJoined("Ayşe")

-- Toggle fonksiyonunu tetikleyebiliriz
toggleHighlight()  -- Highlight'ı kapatmak için çağırıyoruz
toggleHighlight()  -- Highlight'ı tekrar açmak için çağırıyoruz


Rayfield:LoadConfiguration()
